package com.cg.jgen.core;

import com.cgm.storm.utils.common.StringUtils;

/**
 * Connects words between PDEX and JGen
 *
 * @see Dictionary
 */
public class Word {
    /**
     * word generated by PDex
     */
    private String pdexValue;

    /**
     * how JGen should translate the pdexValue
     */
    private String jgenValue;

    private Word(String pdexValue, String jgenValue) {
        this.pdexValue = pdexValue.toLowerCase();
        this.jgenValue = jgenValue;
    }

    /**
     * create a new instance of Word
     *
     * @param pdexValue must be not null
     * @param jgenValue must be not null
     * @return a new instance of Word
     * @throws com.cg.jgen.core.exception.JGenException if pdex or jgenValue is an invalid String (empty or null)
     */
    public static Word create(String pdexValue, String jgenValue) {
        StringUtils.validateString(pdexValue, "pdexValue must be not null or not empty");
        StringUtils.validateString(jgenValue, "jgenValue must be not null or not empty");

        return new Word(pdexValue, jgenValue);
    }

    /**
     * Returns the actual pdexValue
     *
     * @return pdexValue
     */
    public String getPdexValue() {
        return pdexValue;
    }

    /**
     * Returns the actual jgenValue
     *
     * @return jgenValue
     */
    public String getJgenValue() {
        return jgenValue;
    }

    /**
     * @param pdex value to compare
     * @return true if the pdexValue is equals to argument; false otherwise.
     */
    public boolean equalsPdexValue(String pdex) {
        return StringUtils.isValid(pdex) && pdexValue.equals(pdex.toLowerCase());
    }

    @Override
    public String toString() {
        String str = StringUtils.stringFormat(20, "pdex: {}", pdexValue);
        str += StringUtils.stringFormat(20, "jgen: {}", jgenValue);
        return str;
    }
}
